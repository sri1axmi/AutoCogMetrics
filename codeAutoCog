# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, Flatten, Dense, Dropout

# Load dataset
df = pd.read_excel("cognitive_metrics.xlsx")

# Encode categorical target labels to numeric values
le = LabelEncoder()
df['Cognitive_Level'] = le.fit_transform(df['Cognitive_Level'])

# Separate features and target
X = df.drop('Cognitive_Level', axis=1).values
y = df['Cognitive_Level'].values

# Standardize the feature values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ------------------ SVM Model ------------------
# Train a Support Vector Machine classifier
svm_model = SVC(kernel='rbf', C=1, gamma='scale')
svm_model.fit(X_train, y_train)

# Predict using SVM model and calculate accuracy
y_pred_svm = svm_model.predict(X_test)
svm_accuracy = accuracy_score(y_test, y_pred_svm)

# ------------------ CNN Model ------------------
# Reshape data for CNN (add channel dimension)
X_train_cnn = X_train[..., np.newaxis]
X_test_cnn = X_test[..., np.newaxis]

# Define a simple 1D Convolutional Neural Network
cnn_model = Sequential([
    Conv1D(32, 3, activation='relu', input_shape=(X_train.shape[1], 1)),
    Dropout(0.3),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(len(np.unique(y)), activation='softmax')
])

# Compile the CNN model
cnn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the CNN model
cnn_model.fit(X_train_cnn, y_train, epochs=10, batch_size=32, validation_split=0.2, verbose=1)

# Evaluate the CNN model
cnn_accuracy = cnn_model.evaluate(X_test_cnn, y_test)[1]

# ------------------ Visualization ------------------
# Compare accuracy of both models
plt.bar(['SVM', 'CNN'], [svm_accuracy*100, cnn_accuracy*100], color=['blue', 'green'])
plt.title("Model Accuracy Comparison (Python)")
plt.ylabel("Accuracy (%)")
plt.ylim(0, 100)
plt.show()

# ------------------ R Implementation (to be run in R environment) ------------------

# library(readxl)
# library(caret)
# library(e1071)
# library(ggplot2)
# library(keras)

# Load dataset
# df <- read_excel("cognitive_metrics.xlsx")
# df$Cognitive_Level <- as.factor(df$Cognitive_Level)

# Split dataset
# set.seed(123)
# trainIndex <- createDataPartition(df$Cognitive_Level, p = .8, list = FALSE)
# trainData <- df[trainIndex, ]
# testData <- df[-trainIndex, ]

# Train SVM model
# svm_model <- train(Cognitive_Level ~ ., data = trainData, method = "svmRadial")
# svm_preds <- predict(svm_model, testData)
# confusionMatrix(svm_preds, testData$Cognitive_Level)

# Prepare data for neural network
# x_train <- as.matrix(trainData[, -ncol(trainData)])
# y_train <- to_categorical(as.integer(trainData$Cognitive_Level)-1)
# x_test <- as.matrix(testData[, -ncol(testData)])
# y_test <- to_categorical(as.integer(testData$Cognitive_Level)-1)

# Define and compile neural network model
# model <- keras_model_sequential() %>%
#   layer_dense(units = 64, activation = 'relu', input_shape = ncol(x_train)) %>%
#   layer_dropout(rate = 0.3) %>%
#   layer_dense(units = length(unique(df$Cognitive_Level)), activation = 'softmax')

# model %>% compile(
#   loss = 'categorical_crossentropy',
#   optimizer = 'adam',
#   metrics = 'accuracy'
# )

# Train and evaluate the model
# model %>% fit(x_train, y_train, epochs = 10, batch_size = 32, validation_split = 0.2)
# score <- model %>% evaluate(x_test, y_test)
# print(paste("CNN Accuracy in R:", score$accuracy * 100))
